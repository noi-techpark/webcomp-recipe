/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Article, ArticleBaseInfosLocalized, ResultOfArticleBaseInfos, ArticleTypes } from '../models';

/**
 * ArticleApi - axios parameter creator
 * @export
 */
export const ArticleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Article Single
         * @param {string} id ID of the Article
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetActivitySingle: async (id: string, fields?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling articleGetActivitySingle.');
            }
            const localVarPath = `/api/Article/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Article Single Localized
         * @param {string} id ID of the Article
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetActivitySingleLocalized: async (id: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling articleGetActivitySingleLocalized.');
            }
            const localVarPath = `/api/ArticleLocalized/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Article Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Article with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetAllArticleChanged: async (pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ArticleChanged`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Article Types Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetAllArticleTypeSingle: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling articleGetAllArticleTypeSingle.');
            }
            const localVarPath = `/api/ArticleTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Article Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetAllArticleTypesList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ArticleTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Article List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
         * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
         * @param {string} [langfilter] Language Filter (Gets only Articles Available in the passed Language)
         * @param {boolean} [sortbyarticledate] Sort By Articledate (&#x27;true&#x27; sorts Articles by Articledate)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetArticleList: async (pagenumber?: number, pagesize?: number, articletype?: string, articlesubtype?: string, idlist?: string, langfilter?: string, sortbyarticledate?: boolean, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Article`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (articletype !== undefined) {
                localVarQueryParameter['articletype'] = articletype;
            }

            if (articlesubtype !== undefined) {
                localVarQueryParameter['articlesubtype'] = articlesubtype;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (langfilter !== undefined) {
                localVarQueryParameter['langfilter'] = langfilter;
            }

            if (sortbyarticledate !== undefined) {
                localVarQueryParameter['sortbyarticledate'] = sortbyarticledate;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (updatefrom !== undefined) {
                localVarQueryParameter['updatefrom'] = updatefrom;
            }

            if (searchfilter !== undefined) {
                localVarQueryParameter['searchfilter'] = searchfilter;
            }

            // add origin parameter for logging
            localVarQueryParameter['origin'] = "webcomp-recipe";

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Article List Localized
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
         * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetArticleListLocalized: async (language?: string, pagenumber?: number, pagesize?: number, articletype?: string, articlesubtype?: string, idlist?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ArticleLocalized`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (pagenumber !== undefined) {
                localVarQueryParameter['pagenumber'] = pagenumber;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (articletype !== undefined) {
                localVarQueryParameter['articletype'] = articletype;
            }

            if (articlesubtype !== undefined) {
                localVarQueryParameter['articlesubtype'] = articlesubtype;
            }

            if (idlist !== undefined) {
                localVarQueryParameter['idlist'] = idlist;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            if (seed !== undefined) {
                localVarQueryParameter['seed'] = seed;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET Article List Reduced
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
         * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetArticleReducedList: async (language?: string, articletype?: string, articlesubtype?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ArticleReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (articletype !== undefined) {
                localVarQueryParameter['articletype'] = articletype;
            }

            if (articlesubtype !== undefined) {
                localVarQueryParameter['articlesubtype'] = articlesubtype;
            }

            if (odhtagfilter !== undefined) {
                localVarQueryParameter['odhtagfilter'] = odhtagfilter;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (odhactive !== undefined) {
                localVarQueryParameter['odhactive'] = odhactive;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArticleApi - functional programming interface
 * @export
 */
export const ArticleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET Article Single
         * @param {string} id ID of the Article
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articleGetActivitySingle(id: string, fields?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>> {
            const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetActivitySingle(id, fields, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Article Single Localized
         * @param {string} id ID of the Article
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articleGetActivitySingleLocalized(id: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleBaseInfosLocalized>> {
            const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetActivitySingleLocalized(id, language, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Article Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Article with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articleGetAllArticleChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultOfArticleBaseInfos>> {
            const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetAllArticleChanged(pagenumber, pagesize, seed, updatefrom, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Article Types Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articleGetAllArticleTypeSingle(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArticleTypes>> {
            const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetAllArticleTypeSingle(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Article Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articleGetAllArticleTypesList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleTypes>>> {
            const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetAllArticleTypesList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Article List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
         * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
         * @param {string} [langfilter] Language Filter (Gets only Articles Available in the passed Language)
         * @param {boolean} [sortbyarticledate] Sort By Articledate (&#x27;true&#x27; sorts Articles by Articledate)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articleGetArticleList(pagenumber?: number, pagesize?: number, articletype?: string, articlesubtype?: string, idlist?: string, langfilter?: string, sortbyarticledate?: boolean, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Article>>> {
            const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetArticleList(pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Article List Localized
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
         * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articleGetArticleListLocalized(language?: string, pagenumber?: number, pagesize?: number, articletype?: string, articlesubtype?: string, idlist?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArticleBaseInfosLocalized>>> {
            const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetArticleListLocalized(language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET Article List Reduced
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
         * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async articleGetArticleReducedList(language?: string, articletype?: string, articlesubtype?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Article>>> {
            const localVarAxiosArgs = await ArticleApiAxiosParamCreator(configuration).articleGetArticleReducedList(language, articletype, articlesubtype, odhtagfilter, active, odhactive, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ArticleApi - factory interface
 * @export
 */
export const ArticleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET Article Single
         * @param {string} id ID of the Article
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetActivitySingle(id: string, fields?: string, language?: string, options?: any): AxiosPromise<Article> {
            return ArticleApiFp(configuration).articleGetActivitySingle(id, fields, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Article Single Localized
         * @param {string} id ID of the Article
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetActivitySingleLocalized(id: string, language?: string, options?: any): AxiosPromise<ArticleBaseInfosLocalized> {
            return ArticleApiFp(configuration).articleGetActivitySingleLocalized(id, language, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Article Changed List by Date
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Article with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetAllArticleChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any): AxiosPromise<ResultOfArticleBaseInfos> {
            return ArticleApiFp(configuration).articleGetAllArticleChanged(pagenumber, pagesize, seed, updatefrom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Article Types Single
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetAllArticleTypeSingle(id: string, options?: any): AxiosPromise<ArticleTypes> {
            return ArticleApiFp(configuration).articleGetAllArticleTypeSingle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Article Types List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetAllArticleTypesList(options?: any): AxiosPromise<Array<ArticleTypes>> {
            return ArticleApiFp(configuration).articleGetAllArticleTypesList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Article List
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
         * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
         * @param {string} [langfilter] Language Filter (Gets only Articles Available in the passed Language)
         * @param {boolean} [sortbyarticledate] Sort By Articledate (&#x27;true&#x27; sorts Articles by Articledate)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
         * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
         * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
         * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetArticleList(pagenumber?: number, pagesize?: number, articletype?: string, articlesubtype?: string, idlist?: string, langfilter?: string, sortbyarticledate?: boolean, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any): AxiosPromise<Array<Article>> {
            return ArticleApiFp(configuration).articleGetArticleList(pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Article List Localized
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {number} [pagenumber] Pagenumber, (default:1)
         * @param {number} [pagesize] Elements per Page, (default:10)
         * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
         * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
         * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
         * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetArticleListLocalized(language?: string, pagenumber?: number, pagesize?: number, articletype?: string, articlesubtype?: string, idlist?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, options?: any): AxiosPromise<Array<ArticleBaseInfosLocalized>> {
            return ArticleApiFp(configuration).articleGetArticleListLocalized(language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET Article List Reduced
         * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
         * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
         * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
         * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
         * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
         * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        articleGetArticleReducedList(language?: string, articletype?: string, articlesubtype?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, options?: any): AxiosPromise<Array<Article>> {
            return ArticleApiFp(configuration).articleGetArticleReducedList(language, articletype, articlesubtype, odhtagfilter, active, odhactive, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArticleApi - object-oriented interface
 * @export
 * @class ArticleApi
 * @extends {BaseAPI}
 */
export class ArticleApi extends BaseAPI {
    /**
     * 
     * @summary GET Article Single
     * @param {string} id ID of the Article
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public articleGetActivitySingle(id: string, fields?: string, language?: string, options?: any) {
        return ArticleApiFp(this.configuration).articleGetActivitySingle(id, fields, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Article Single Localized
     * @param {string} id ID of the Article
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public articleGetActivitySingleLocalized(id: string, language?: string, options?: any) {
        return ArticleApiFp(this.configuration).articleGetActivitySingleLocalized(id, language, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Article Changed List by Date
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page (max 1024), (default:10)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all Article with LastChange &amp;gt;&#x3D; datefrom are passed), (default: DateTime.Now - 1 Day)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public articleGetAllArticleChanged(pagenumber?: number, pagesize?: number, seed?: string, updatefrom?: string, options?: any) {
        return ArticleApiFp(this.configuration).articleGetAllArticleChanged(pagenumber, pagesize, seed, updatefrom, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Article Types Single
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public articleGetAllArticleTypeSingle(id: string, options?: any) {
        return ArticleApiFp(this.configuration).articleGetAllArticleTypeSingle(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Article Types List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public articleGetAllArticleTypesList(options?: any) {
        return ArticleApiFp(this.configuration).articleGetAllArticleTypesList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Article List
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
     * @param {string} [langfilter] Language Filter (Gets only Articles Available in the passed Language)
     * @param {boolean} [sortbyarticledate] Sort By Articledate (&#x27;true&#x27; sorts Articles by Articledate)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {string} [fields] Select fields to display, More fields are indicated by separator &#x27;,&#x27; example fields&#x3D;Id,Active,Shortname. Select also Dictionary fields, example Detail.de.Title, or Elements of Arrays example ImageGallery[0].ImageUrl. (default:&#x27;null&#x27; all fields are displayed)
     * @param {string} [language] Language field selector, displays data and fields available in the selected language (default:&#x27;null&#x27; all languages are displayed)
     * @param {string} [updatefrom] Date from Format (yyyy-MM-dd) (all GBActivityPoi with LastChange &amp;gt;&#x3D; datefrom are passed), (default: null)
     * @param {string} [searchfilter] String to search for, Title in all languages are searched, (default: null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public articleGetArticleList(pagenumber?: number, pagesize?: number, articletype?: string, articlesubtype?: string, idlist?: string, langfilter?: string, sortbyarticledate?: boolean, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, fields?: string, language?: string, updatefrom?: string, searchfilter?: string, options?: any) {
        return ArticleApiFp(this.configuration).articleGetArticleList(pagenumber, pagesize, articletype, articlesubtype, idlist, langfilter, sortbyarticledate, odhtagfilter, active, odhactive, seed, fields, language, updatefrom, searchfilter, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Article List Localized
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {number} [pagenumber] Pagenumber, (default:1)
     * @param {number} [pagesize] Elements per Page, (default:10)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [idlist] IDFilter (Separator &#x27;,&#x27; List of Article IDs), (default:&#x27;null&#x27;)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {string} [seed] Seed &#x27;1 - 10&#x27; for Random Sorting, &#x27;0&#x27; generates a Random Seed, &#x27;null&#x27; disables Random Sorting, (default:null)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public articleGetArticleListLocalized(language?: string, pagenumber?: number, pagesize?: number, articletype?: string, articlesubtype?: string, idlist?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, seed?: string, options?: any) {
        return ArticleApiFp(this.configuration).articleGetArticleListLocalized(language, pagenumber, pagesize, articletype, articlesubtype, idlist, odhtagfilter, active, odhactive, seed, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET Article List Reduced
     * @param {string} [language] Localization Language, (default:&#x27;en&#x27;)
     * @param {string} [articletype] Type of the Article (&#x27;null&#x27; &#x3D; Filter disabled, possible values: BITMASK values: 1 &#x3D; basearticle, 2 &#x3D; book article, 4 &#x3D; contentarticle, 8 &#x3D; eventarticle, 16 &#x3D; pressarticle, 32 &#x3D; recipe, 64 &#x3D; touroperator , 128 &#x3D; b2b), (also possible for compatibily reasons: basisartikel, buchtippartikel, contentartikel, veranstaltungsartikel, presseartikel, rezeptartikel, reiseveranstalter, b2bartikel ) (default:&#x27;255&#x27; &#x3D;&#x3D; ALL), REFERENCE TO: GET /api/ArticleTypes
     * @param {string} [articlesubtype] Sub Type of the Article (depends on the Maintype of the Article &#x27;null&#x27; &#x3D; Filter disabled)
     * @param {string} [odhtagfilter] ODH Taglist Filter (refers to Array SmgTags) (String, Separator &#x27;,&#x27; more Tags possible, available Tags reference to &#x27;api/ODHTag?validforentity&#x3D;article&#x27;), (default:&#x27;null&#x27;)
     * @param {boolean} [active] Active Articles Filter (possible Values: &#x27;true&#x27; only Active Articles, &#x27;false&#x27; only Disabled Articles
     * @param {boolean} [odhactive] ODH Active (Published) Activities Filter (Refers to field SmgActive) Article Filter (possible Values: &#x27;true&#x27; only published Article, &#x27;false&#x27; only not published Articles, (default:&#x27;null&#x27;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticleApi
     */
    public articleGetArticleReducedList(language?: string, articletype?: string, articlesubtype?: string, odhtagfilter?: string, active?: boolean, odhactive?: boolean, options?: any) {
        return ArticleApiFp(this.configuration).articleGetArticleReducedList(language, articletype, articlesubtype, odhtagfilter, active, odhactive, options).then((request) => request(this.axios, this.basePath));
    }
}
