// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

/* tslint:disable */
/* eslint-disable */
/**
 * Open Data Hub Api Tourism
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: V1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { SmgTagReduced, SmgTags } from '../models';
/**
 * ODHTagApi - axios parameter creator
 * @export
 */
export const ODHTagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET ODHTag Single
         * @param {string} id Id of ODHtag
         * @param {string} [language] Localization Language
         * @param {string} [localizationlanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oDHTagGetODHTagSingle: async (id: string, language?: string, localizationlanguage?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling oDHTagGetODHTagSingle.');
            }
            const localVarPath = `/api/ODHTag/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (localizationlanguage !== undefined) {
                localVarQueryParameter['localizationlanguage'] = localizationlanguage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET ODHTag List
         * @param {string} [language] Localization Language
         * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi/smgpoi, package, gastronomy, event, article, common .. etc..)
         * @param {string} [localizationlanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oDHTagGetODHTags: async (language?: string, validforentity?: string, localizationlanguage?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ODHTag`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (validforentity !== undefined) {
                localVarQueryParameter['validforentity'] = validforentity;
            }

            if (localizationlanguage !== undefined) {
                localVarQueryParameter['localizationlanguage'] = localizationlanguage;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GET ODHTag List REDUCED
         * @param {string} language Localization Language
         * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi, package, gastronomy, event, article, common .. etc..)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oDHTagGetODHTagsReduced: async (language: string, validforentity?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'language' is not null or undefined
            if (language === null || language === undefined) {
                throw new RequiredError('language','Required parameter language was null or undefined when calling oDHTagGetODHTagsReduced.');
            }
            const localVarPath = `/api/ODHTagReduced`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("oauth2", [""])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (validforentity !== undefined) {
                localVarQueryParameter['validforentity'] = validforentity;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ODHTagApi - functional programming interface
 * @export
 */
export const ODHTagApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary GET ODHTag Single
         * @param {string} id Id of ODHtag
         * @param {string} [language] Localization Language
         * @param {string} [localizationlanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oDHTagGetODHTagSingle(id: string, language?: string, localizationlanguage?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmgTags>> {
            const localVarAxiosArgs = await ODHTagApiAxiosParamCreator(configuration).oDHTagGetODHTagSingle(id, language, localizationlanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET ODHTag List
         * @param {string} [language] Localization Language
         * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi/smgpoi, package, gastronomy, event, article, common .. etc..)
         * @param {string} [localizationlanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oDHTagGetODHTags(language?: string, validforentity?: string, localizationlanguage?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SmgTags>>> {
            const localVarAxiosArgs = await ODHTagApiAxiosParamCreator(configuration).oDHTagGetODHTags(language, validforentity, localizationlanguage, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary GET ODHTag List REDUCED
         * @param {string} language Localization Language
         * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi, package, gastronomy, event, article, common .. etc..)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oDHTagGetODHTagsReduced(language: string, validforentity?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SmgTagReduced>>> {
            const localVarAxiosArgs = await ODHTagApiAxiosParamCreator(configuration).oDHTagGetODHTagsReduced(language, validforentity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ODHTagApi - factory interface
 * @export
 */
export const ODHTagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary GET ODHTag Single
         * @param {string} id Id of ODHtag
         * @param {string} [language] Localization Language
         * @param {string} [localizationlanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oDHTagGetODHTagSingle(id: string, language?: string, localizationlanguage?: string, options?: any): AxiosPromise<SmgTags> {
            return ODHTagApiFp(configuration).oDHTagGetODHTagSingle(id, language, localizationlanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET ODHTag List
         * @param {string} [language] Localization Language
         * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi/smgpoi, package, gastronomy, event, article, common .. etc..)
         * @param {string} [localizationlanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oDHTagGetODHTags(language?: string, validforentity?: string, localizationlanguage?: string, options?: any): AxiosPromise<Array<SmgTags>> {
            return ODHTagApiFp(configuration).oDHTagGetODHTags(language, validforentity, localizationlanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GET ODHTag List REDUCED
         * @param {string} language Localization Language
         * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi, package, gastronomy, event, article, common .. etc..)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oDHTagGetODHTagsReduced(language: string, validforentity?: string, options?: any): AxiosPromise<Array<SmgTagReduced>> {
            return ODHTagApiFp(configuration).oDHTagGetODHTagsReduced(language, validforentity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ODHTagApi - object-oriented interface
 * @export
 * @class ODHTagApi
 * @extends {BaseAPI}
 */
export class ODHTagApi extends BaseAPI {
    /**
     * 
     * @summary GET ODHTag Single
     * @param {string} id Id of ODHtag
     * @param {string} [language] Localization Language
     * @param {string} [localizationlanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ODHTagApi
     */
    public oDHTagGetODHTagSingle(id: string, language?: string, localizationlanguage?: string, options?: any) {
        return ODHTagApiFp(this.configuration).oDHTagGetODHTagSingle(id, language, localizationlanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET ODHTag List
     * @param {string} [language] Localization Language
     * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi/smgpoi, package, gastronomy, event, article, common .. etc..)
     * @param {string} [localizationlanguage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ODHTagApi
     */
    public oDHTagGetODHTags(language?: string, validforentity?: string, localizationlanguage?: string, options?: any) {
        return ODHTagApiFp(this.configuration).oDHTagGetODHTags(language, validforentity, localizationlanguage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary GET ODHTag List REDUCED
     * @param {string} language Localization Language
     * @param {string} [validforentity] Filter on Tags valid on Entitys (accommodation, activity, poi, odhactivitypoi, package, gastronomy, event, article, common .. etc..)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ODHTagApi
     */
    public oDHTagGetODHTagsReduced(language: string, validforentity?: string, options?: any) {
        return ODHTagApiFp(this.configuration).oDHTagGetODHTagsReduced(language, validforentity, options).then((request) => request(this.axios, this.basePath));
    }
}
